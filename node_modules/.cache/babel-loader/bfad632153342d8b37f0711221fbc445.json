{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Amanjeet Sahay\\\\Desktop\\\\blockchain-developer-bootcamp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Amanjeet Sahay\\\\Desktop\\\\blockchain-developer-bootcamp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nexport var loadWeb3 = function loadWeb3(dispatch) {\n  var web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n  dispatch(web3Loaded(web3));\n  return web3;\n};\nexport var loadAccount =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.getAccounts();\n\n          case 2:\n            accounts = _context.sent;\n            account = accounts[0];\n            dispatch(web3AccountLoaded(account));\n            return _context.abrupt(\"return\", account);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadAccount(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadToken =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            token = web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context2.abrupt(\"return\", token);\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadExchange =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(web3, networkId, dispatch) {\n    var exchange;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            exchange = web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n            dispatch(exchangeLoaded(exchange));\n            return _context3.abrupt(\"return\", exchange);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function loadExchange(_x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\Users\\Amanjeet Sahay\\Desktop\\blockchain-developer-bootcamp\\src\\store\\interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","Token","Exchange","loadWeb3","dispatch","web3","givenProvider","loadAccount","eth","getAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","console","log","loadExchange","exchange"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SACEC,UADF,EAEEC,iBAFF,EAGEC,WAHF,EAIEC,cAJF,QAKO,WALP;AAMA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AACpC,MAAMC,IAAI,GAAG,IAAIT,IAAJ,CAASA,IAAI,CAACU,aAAL,IAAsB,uBAA/B,CAAb;AACAF,EAAAA,QAAQ,CAACP,UAAU,CAACQ,IAAD,CAAX,CAAR;AACA,SAAOA,IAAP;AACD,CAJM;AAMP,OAAO,IAAME,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOF,IAAP,EAAaD,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFC,IAAI,CAACG,GAAL,CAASC,WAAT,EADE;;AAAA;AACnBC,YAAAA,QADmB;AAEnBC,YAAAA,OAFmB,GAETD,QAAQ,CAAC,CAAD,CAFC;AAGzBN,YAAAA,QAAQ,CAACN,iBAAiB,CAACa,OAAD,CAAlB,CAAR;AAHyB,6CAIlBA,OAJkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB;AAOP,OAAO,IAAMK,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOP,IAAP,EAAaQ,SAAb,EAAwBT,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfU,YAAAA,KAFe,GAEPT,IAAI,CAACG,GAAL,CAASO,QAAT,CAAkBd,KAAK,CAACe,GAAxB,EAA6Bf,KAAK,CAACgB,QAAN,CAAeJ,SAAf,EAA0BK,OAAvD,CAFO;AAGrBd,YAAAA,QAAQ,CAACL,WAAW,CAACe,KAAD,CAAZ,CAAR;AAHqB,8CAIdA,KAJc;;AAAA;AAAA;AAAA;AAMrBK,YAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AANqB,8CAOd,IAPc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATR,SAAS;AAAA;AAAA;AAAA,GAAf;AAWP,OAAO,IAAMS,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOhB,IAAP,EAAaQ,SAAb,EAAwBT,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAElBkB,YAAAA,QAFkB,GAEPjB,IAAI,CAACG,GAAL,CAASO,QAAT,CAAkBb,QAAQ,CAACc,GAA3B,EAAgCd,QAAQ,CAACe,QAAT,CAAkBJ,SAAlB,EAA6BK,OAA7D,CAFO;AAGxBd,YAAAA,QAAQ,CAACJ,cAAc,CAACsB,QAAD,CAAf,CAAR;AAHwB,8CAIjBA,QAJiB;;AAAA;AAAA;AAAA;AAMxBH,YAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AANwB,8CAOjB,IAPiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZC,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import Web3 from 'web3'\nimport {\n  web3Loaded,\n  web3AccountLoaded,\n  tokenLoaded,\n  exchangeLoaded\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\n\nexport const loadWeb3 = (dispatch) => {\n  const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545')\n  dispatch(web3Loaded(web3))\n  return web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts()\n  const account = accounts[0]\n  dispatch(web3AccountLoaded(account))\n  return account\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n    dispatch(exchangeLoaded(exchange))\n    return exchange\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}